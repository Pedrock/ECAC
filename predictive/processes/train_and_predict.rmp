<?xml version="1.0" encoding="UTF-8"?><process version="8.0.001">
  <context>
    <input/>
    <output/>
    <macros/>
  </context>
  <operator activated="true" class="process" compatibility="8.0.001" expanded="true" name="Process">
    <parameter key="logverbosity" value="init"/>
    <parameter key="random_seed" value="2001"/>
    <parameter key="send_mail" value="never"/>
    <parameter key="notification_email" value=""/>
    <parameter key="process_duration_for_mail" value="30"/>
    <parameter key="encoding" value="SYSTEM"/>
    <process expanded="true">
      <operator activated="true" class="subprocess" compatibility="8.0.001" expanded="true" height="82" name="DB Read Train" width="90" x="45" y="34">
        <process expanded="true">
          <operator activated="true" class="jdbc_connectors:read_database" compatibility="8.0.001" expanded="true" height="68" name="Read Database (Train data)" width="90" x="581" y="34">
            <parameter key="define_connection" value="predefined"/>
            <parameter key="connection" value="postgres"/>
            <parameter key="database_system" value="MySQL"/>
            <parameter key="define_query" value="query"/>
            <parameter key="query" value="WITH&#10;trans AS (SELECT * FROM trans_train), -- also change below&#10;loan AS (SELECT * FROM loan_train),&#10;card AS (SELECT * FROM card_train),&#10;account_extra_info AS (&#10;  SELECT&#10;    *,&#10;    (SELECT MIN(balance::REAL) FROM trans_train WHERE trans_train.account_id = x.account_id AND trans_train.date = latest_transaction_date) AS last_balance&#10;  FROM (&#10;    SELECT&#10;      account_id,&#10;      MAX(balance::REAL) AS max_balance,&#10;      MIN(balance::REAL) AS min_balance,&#10;      AVG(balance::REAL) AS avg_balance,&#10;      abs(percentile_cont(0.5) WITHIN GROUP (ORDER BY balance::real) / percentile_cont(0.1) WITHIN GROUP (ORDER BY balance::real)) AS balance_drop_ratio,&#10;      MAX(date) AS latest_transaction_date,&#10;      bool_or(operation = 'remittance to another bank') AS has_remittance,&#10;      COUNT(DISTINCT bank) FILTER (WHERE bank &lt;&gt; '') AS bank_connections&#10;    FROM trans&#10;    GROUP BY (account_id)&#10;  ) AS x&#10;),trans_info_month AS (&#10;  SELECT&#10;    account_id,&#10;    COALESCE(SUM(amount::REAL) FILTER (WHERE type = 'credit' AND k_symbol &lt;&gt; 'interest credited'), 0) AS credit,&#10;    COALESCE(SUM(amount::REAL) FILTER (WHERE type = 'credit' AND k_symbol = 'interest credited'), 0) AS interest_credit,&#10;    COALESCE(SUM(amount::REAL) FILTER (WHERE type = 'withdrawal' OR type = 'withdrawal in cash'), 0) AS widthdrawal,&#10;    COALESCE(COUNT(*)) AS trans_count&#10;  FROM trans&#10;  GROUP BY (account_id, substring(date FROM 1 FOR 4))&#10;), trans_info AS (&#10;  SELECT&#10;    account_id,&#10;    AVG(credit) AS avg_month_income,&#10;    AVG(interest_credit) AS avg_month_interest_credit,&#10;    AVG(widthdrawal) AS avg_month_widthdrawal,&#10;    AVG(trans_count) AS avg_month_trans_count,&#10;    stddev_pop(credit) AS stddev_credit&#10;    FROM trans_info_month&#10;    GROUP BY (account_id)&#10;), clients_per_account AS (&#10;  SELECT&#10;    account_id,&#10;    COUNT(client_id) AS clients_count,&#10;    SUM(avg_month_income) account_sum_avg_income&#10;  FROM disp&#10;  LEFT JOIN trans_info USING (account_id)&#10;  GROUP BY (account_id)&#10;)&#10;SELECT&#10;  l.loan_id,&#10;  --to_date(l.date, 'YYMMDD') AS date,&#10;  l.amount::int,&#10;  l.duration::int,&#10;  l.payments::int,&#10;  a.frequency AS account_frequency,&#10;  a.district_id,&#10;  --to_date(a.date, 'YYMMDD') AS account_date,&#10;  to_date(l.date, 'YYMMDD') - to_date(a.date, 'YYMMDD') AS account_age,&#10;  d.region AS owner_region,&#10;  dist_account.region as account_region,&#10;&#10;  dist_account.no__of_inhabitants::int,&#10;  dist_account.no__of_municipalities_with_inhabitants_less_499::int,&#10;  dist_account.no__of_municipalities_with_inhabitants_500_1999::int,&#10;  dist_account.no__of_municipalities_with_inhabitants_2000_9999::int,&#10;  dist_account.no__of_municipalities_with_inhabitants_greater_10000::int,&#10;  dist_account.no__of_cities::int,&#10;  dist_account.ratio_of_urban_inhabitants::real,&#10;  dist_account.average_salary::int,&#10;  dist_account.unemploymant_rate_96::real,&#10;  dist_account.no__of_enterpreneurs_per_1000_inhabitants::int,&#10;  dist_account.no__of_commited_crimes_96::int,&#10;&#10;  d.no__of_inhabitants::int AS owner_no__of_inhabitants,&#10;  d.no__of_municipalities_with_inhabitants_less_499::int AS owner_no__of_municipalities_with_inhabitants_less_499,&#10;  d.no__of_municipalities_with_inhabitants_500_1999::int AS owner_no__of_municipalities_with_inhabitants_500_1999,&#10;  d.no__of_municipalities_with_inhabitants_2000_9999::int AS owner_no__of_municipalities_with_inhabitants_2000_9999,&#10;  d.no__of_municipalities_with_inhabitants_greater_10000::int AS owner_no__of_municipalities_with_inhabitants_greater_10000,&#10;  d.no__of_cities::int AS owner_no__of_cities,&#10;  d.ratio_of_urban_inhabitants::real AS owner_ratio_of_urban_inhabitants,&#10;  d.average_salary::int AS owner_average_salary,&#10;  d.unemploymant_rate_96::real AS owner_unemploymant_rate_96,&#10;  d.no__of_enterpreneurs_per_1000_inhabitants::int AS owner_no__of_enterpreneurs_per_1000_inhabitants,&#10;  d.no__of_commited_crimes_96::int AS owner_no__of_commited_crimes_96,&#10;&#10;  CASE WHEN substring(co.birth_number FROM 3 FOR 2)::int &gt;= 50 THEN 'female' ELSE 'male' END AS owner_sex,&#10;  date_part('year', age(to_date(l.date, 'YYMMDD'), client_birthday(co.birth_number))) AS owner_age,&#10;  ca.clients_count AS clients_count,&#10;  c.type AS card_type,&#10;  c.type IS NOT NULL AS has_credit_card,&#10;  date_part('year', age(to_date(c.issued, 'YYMMDD'), client_birthday(co.birth_number))) AS card_issued_owner_age,&#10;  date_part('year', age(to_date(c.issued, 'YYMMDD'), to_date(a.date, 'YYMMDD'))) AS card_issued_account_age,&#10;  to_date(l.date, 'YYMMDD') - to_date(c.issued, 'YYMMDD') AS loan_to_card_issued_diff,&#10;  trans_info.avg_month_income,&#10;  trans_info.avg_month_interest_credit,&#10;  trans_info.avg_month_widthdrawal,&#10;  trans_info.avg_month_trans_count,&#10;  trans_info.stddev_credit / trans_info.avg_month_income AS credit_instability,&#10;  --account_extra_info.max_balance,&#10;  --account_extra_info.min_balance,&#10;  account_extra_info.min_balance &lt; 0 AS has_had_negative_balance,&#10;  --account_extra_info.avg_balance,&#10;  account_extra_info.balance_drop_ratio,&#10;  account_extra_info.has_remittance,&#10;  account_extra_info.bank_connections,&#10;  trans_info.avg_month_widthdrawal / trans_info.avg_month_income AS percentage_spent,&#10;&#10;  trans_info.avg_month_income / (dist_account.average_salary::int + d.average_salary::int) / 2 AS salary_comparisson,&#10;  --account_extra_info.avg_balance / (dist_account.average_salary::int + d.average_salary::int) / 2 AS salary_comparisson2,&#10;  --account_extra_info.max_balance / dist_account.average_salary::int AS salary_comparisson3,&#10;  --trans_info.avg_month_interest_credit / trans_info.avg_month_income AS interest_credit_percentage,&#10;  --l.amount::int / dist_account.average_salary::int AS amount_avg_salary_ratio,&#10;  -- TODO: amount per sum of salary of all account clients&#10;  --l.amount::int / trans_info.avg_month_income AS amount_avg_credit_ratio,&#10;&#10;  l.payments::int / ca.account_sum_avg_income AS shared_percentage_payment,&#10;  l.payments::int / trans_info.avg_month_income AS percentage_payment,&#10;&#10;  last_balance / account_extra_info.max_balance AS percentage_from_max_balance,&#10;&#10;  d.code &lt;&gt; dist_account.code AS bank_in_other_district,&#10;&#10;  l.status&#10;FROM loan AS l&#10;LEFT JOIN account AS a USING (account_id)&#10;LEFT JOIN trans_info USING (account_id)&#10;LEFT JOIN account_extra_info USING (account_id)&#10;LEFT JOIN district AS dist_account ON (a.district_id = dist_account.code)&#10;LEFT JOIN disp AS disp_owner ON (disp_owner.type = 'OWNER' AND disp_owner.account_id = a.account_id)&#10;LEFT JOIN client AS co ON (co.client_id = disp_owner.client_id)&#10;LEFT JOIN district AS d ON (co.district_id = d.code)&#10;LEFT JOIN clients_per_account ca ON (a.account_id = ca.account_id)&#10;LEFT JOIN card AS c ON (disp_owner.disp_id = c.disp_id);"/>
            <parameter key="use_default_schema" value="true"/>
            <parameter key="prepare_statement" value="false"/>
            <enumeration key="parameters"/>
            <parameter key="datamanagement" value="double_array"/>
            <parameter key="data_management" value="auto"/>
          </operator>
          <operator activated="true" class="set_role" compatibility="8.0.001" expanded="true" height="82" name="Set Role (2)" width="90" x="715" y="34">
            <parameter key="attribute_name" value="loan_id"/>
            <parameter key="target_role" value="id"/>
            <list key="set_additional_roles">
              <parameter key="status" value="label"/>
            </list>
          </operator>
          <operator activated="true" class="store" compatibility="8.0.001" expanded="true" height="68" name="Store train_data" width="90" x="849" y="34">
            <parameter key="repository_entry" value="../data/train_data"/>
          </operator>
          <connect from_op="Read Database (Train data)" from_port="output" to_op="Set Role (2)" to_port="example set input"/>
          <connect from_op="Set Role (2)" from_port="example set output" to_op="Store train_data" to_port="input"/>
          <connect from_op="Store train_data" from_port="through" to_port="out 1"/>
          <portSpacing port="source_in 1" spacing="0"/>
          <portSpacing port="sink_out 1" spacing="0"/>
          <portSpacing port="sink_out 2" spacing="0"/>
        </process>
      </operator>
      <operator activated="true" class="subprocess" compatibility="8.0.001" expanded="true" height="82" name="DB Read Test" width="90" x="648" y="238">
        <process expanded="true">
          <operator activated="true" class="jdbc_connectors:read_database" compatibility="8.0.001" expanded="true" height="68" name="Read Database (Test Data)" width="90" x="45" y="34">
            <parameter key="define_connection" value="predefined"/>
            <parameter key="connection" value="postgres"/>
            <parameter key="database_system" value="MySQL"/>
            <parameter key="define_query" value="query"/>
            <parameter key="query" value="WITH&#10;trans AS (SELECT * FROM trans_test), -- also change below&#10;loan AS (SELECT * FROM loan_test),&#10;card AS (SELECT * FROM card_test),&#10;account_extra_info AS (&#10;  SELECT&#10;    *,&#10;    (SELECT MIN(balance::REAL) FROM trans_test WHERE trans_test.account_id = x.account_id AND trans_test.date = latest_transaction_date) AS last_balance&#10;  FROM (&#10;    SELECT&#10;      account_id,&#10;      MAX(balance::REAL) AS max_balance,&#10;      MIN(balance::REAL) AS min_balance,&#10;      AVG(balance::REAL) AS avg_balance,&#10;      abs(percentile_cont(0.5) WITHIN GROUP (ORDER BY balance::real) / percentile_cont(0.1) WITHIN GROUP (ORDER BY balance::real)) AS balance_drop_ratio,&#10;      MAX(date) AS latest_transaction_date,&#10;      bool_or(operation = 'remittance to another bank') AS has_remittance,&#10;      COUNT(DISTINCT bank) FILTER (WHERE bank &lt;&gt; '') AS bank_connections&#10;    FROM trans&#10;    GROUP BY (account_id)&#10;  ) AS x&#10;),trans_info_month AS (&#10;  SELECT&#10;    account_id,&#10;    COALESCE(SUM(amount::REAL) FILTER (WHERE type = 'credit' AND k_symbol &lt;&gt; 'interest credited'), 0) AS credit,&#10;    COALESCE(SUM(amount::REAL) FILTER (WHERE type = 'credit' AND k_symbol = 'interest credited'), 0) AS interest_credit,&#10;    COALESCE(SUM(amount::REAL) FILTER (WHERE type = 'withdrawal' OR type = 'withdrawal in cash'), 0) AS widthdrawal,&#10;    COALESCE(COUNT(*)) AS trans_count&#10;  FROM trans&#10;  GROUP BY (account_id, substring(date FROM 1 FOR 4))&#10;), trans_info AS (&#10;  SELECT&#10;    account_id,&#10;    AVG(credit) AS avg_month_income,&#10;    AVG(interest_credit) AS avg_month_interest_credit,&#10;    AVG(widthdrawal) AS avg_month_widthdrawal,&#10;    AVG(trans_count) AS avg_month_trans_count,&#10;    stddev_pop(credit) AS stddev_credit&#10;    FROM trans_info_month&#10;    GROUP BY (account_id)&#10;), clients_per_account AS (&#10;  SELECT&#10;    account_id,&#10;    COUNT(client_id) AS clients_count,&#10;    SUM(avg_month_income) account_sum_avg_income&#10;  FROM disp&#10;  LEFT JOIN trans_info USING (account_id)&#10;  GROUP BY (account_id)&#10;)&#10;SELECT&#10;  l.loan_id,&#10;  --to_date(l.date, 'YYMMDD') AS date,&#10;  l.amount::int,&#10;  l.duration::int,&#10;  l.payments::int,&#10;  a.frequency AS account_frequency,&#10;  a.district_id,&#10;  --to_date(a.date, 'YYMMDD') AS account_date,&#10;  to_date(l.date, 'YYMMDD') - to_date(a.date, 'YYMMDD') AS account_age,&#10;  d.region AS owner_region,&#10;  dist_account.region as account_region,&#10;&#10;  dist_account.no__of_inhabitants::int,&#10;  dist_account.no__of_municipalities_with_inhabitants_less_499::int,&#10;  dist_account.no__of_municipalities_with_inhabitants_500_1999::int,&#10;  dist_account.no__of_municipalities_with_inhabitants_2000_9999::int,&#10;  dist_account.no__of_municipalities_with_inhabitants_greater_10000::int,&#10;  dist_account.no__of_cities::int,&#10;  dist_account.ratio_of_urban_inhabitants::real,&#10;  dist_account.average_salary::int,&#10;  dist_account.unemploymant_rate_96::real,&#10;  dist_account.no__of_enterpreneurs_per_1000_inhabitants::int,&#10;  dist_account.no__of_commited_crimes_96::int,&#10;&#10;  d.no__of_inhabitants::int AS owner_no__of_inhabitants,&#10;  d.no__of_municipalities_with_inhabitants_less_499::int AS owner_no__of_municipalities_with_inhabitants_less_499,&#10;  d.no__of_municipalities_with_inhabitants_500_1999::int AS owner_no__of_municipalities_with_inhabitants_500_1999,&#10;  d.no__of_municipalities_with_inhabitants_2000_9999::int AS owner_no__of_municipalities_with_inhabitants_2000_9999,&#10;  d.no__of_municipalities_with_inhabitants_greater_10000::int AS owner_no__of_municipalities_with_inhabitants_greater_10000,&#10;  d.no__of_cities::int AS owner_no__of_cities,&#10;  d.ratio_of_urban_inhabitants::real AS owner_ratio_of_urban_inhabitants,&#10;  d.average_salary::int AS owner_average_salary,&#10;  d.unemploymant_rate_96::real AS owner_unemploymant_rate_96,&#10;  d.no__of_enterpreneurs_per_1000_inhabitants::int AS owner_no__of_enterpreneurs_per_1000_inhabitants,&#10;  d.no__of_commited_crimes_96::int AS owner_no__of_commited_crimes_96,&#10;&#10;  CASE WHEN substring(co.birth_number FROM 3 FOR 2)::int &gt;= 50 THEN 'female' ELSE 'male' END AS owner_sex,&#10;  date_part('year', age(to_date(l.date, 'YYMMDD'), client_birthday(co.birth_number))) AS owner_age,&#10;  ca.clients_count AS clients_count,&#10;  c.type AS card_type,&#10;  c.type IS NOT NULL AS has_credit_card,&#10;  date_part('year', age(to_date(c.issued, 'YYMMDD'), client_birthday(co.birth_number))) AS card_issued_owner_age,&#10;  date_part('year', age(to_date(c.issued, 'YYMMDD'), to_date(a.date, 'YYMMDD'))) AS card_issued_account_age,&#10;  to_date(l.date, 'YYMMDD') - to_date(c.issued, 'YYMMDD') AS loan_to_card_issued_diff,&#10;  trans_info.avg_month_income,&#10;  trans_info.avg_month_interest_credit,&#10;  trans_info.avg_month_widthdrawal,&#10;  trans_info.avg_month_trans_count,&#10;  trans_info.stddev_credit / trans_info.avg_month_income AS credit_instability,&#10;  --account_extra_info.max_balance,&#10;  --account_extra_info.min_balance,&#10;  account_extra_info.min_balance &lt; 0 AS has_had_negative_balance,&#10;  account_extra_info.avg_balance,&#10;  account_extra_info.balance_drop_ratio,&#10;  account_extra_info.has_remittance,&#10;  account_extra_info.bank_connections,&#10;  trans_info.avg_month_widthdrawal / trans_info.avg_month_income AS percentage_spent,&#10;&#10;  trans_info.avg_month_income / (dist_account.average_salary::int + d.average_salary::int) / 2 AS salary_comparisson,&#10;  --account_extra_info.avg_balance / (dist_account.average_salary::int + d.average_salary::int) / 2 AS salary_comparisson2,&#10;  --account_extra_info.max_balance / dist_account.average_salary::int AS salary_comparisson3,&#10;  trans_info.avg_month_interest_credit / trans_info.avg_month_income AS interest_credit_percentage,&#10;  --l.amount::int / dist_account.average_salary::int AS amount_avg_salary_ratio,&#10;  -- TODO: amount per sum of salary of all account clients&#10;  --l.amount::int / trans_info.avg_month_income AS amount_avg_credit_ratio,&#10;&#10;  l.payments::int / ca.account_sum_avg_income AS shared_percentage_payment,&#10;  l.payments::int / trans_info.avg_month_income AS percentage_payment,&#10;&#10;  last_balance / account_extra_info.max_balance AS percentage_from_max_balance,&#10;&#10;  d.code &lt;&gt; dist_account.code AS bank_in_other_district,&#10;&#10;  l.status&#10;FROM loan AS l&#10;LEFT JOIN account AS a USING (account_id)&#10;LEFT JOIN trans_info USING (account_id)&#10;LEFT JOIN account_extra_info USING (account_id)&#10;LEFT JOIN district AS dist_account ON (a.district_id = dist_account.code)&#10;LEFT JOIN disp AS disp_owner ON (disp_owner.type = 'OWNER' AND disp_owner.account_id = a.account_id)&#10;LEFT JOIN client AS co ON (co.client_id = disp_owner.client_id)&#10;LEFT JOIN district AS d ON (co.district_id = d.code)&#10;LEFT JOIN clients_per_account ca ON (a.account_id = ca.account_id)&#10;LEFT JOIN card AS c ON (disp_owner.disp_id = c.disp_id);"/>
            <parameter key="use_default_schema" value="true"/>
            <parameter key="prepare_statement" value="false"/>
            <enumeration key="parameters"/>
            <parameter key="datamanagement" value="double_array"/>
            <parameter key="data_management" value="auto"/>
          </operator>
          <operator activated="true" class="store" compatibility="8.0.001" expanded="true" height="68" name="Store test data" width="90" x="179" y="34">
            <parameter key="repository_entry" value="../data/test_data"/>
          </operator>
          <connect from_op="Read Database (Test Data)" from_port="output" to_op="Store test data" to_port="input"/>
          <connect from_op="Store test data" from_port="through" to_port="out 1"/>
          <portSpacing port="source_in 1" spacing="0"/>
          <portSpacing port="sink_out 1" spacing="0"/>
          <portSpacing port="sink_out 2" spacing="0"/>
        </process>
      </operator>
      <operator activated="true" class="filter_examples" compatibility="8.0.001" expanded="true" height="103" name="Filter Examples" width="90" x="179" y="34">
        <parameter key="parameter_expression" value=""/>
        <parameter key="condition_class" value="custom_filters"/>
        <parameter key="invert_filter" value="false"/>
        <list key="filters_list">
          <parameter key="filters_entry_key" value="status.equals.-1"/>
        </list>
        <parameter key="filters_logic_and" value="true"/>
        <parameter key="filters_check_metadata" value="true"/>
      </operator>
      <operator activated="true" class="append" compatibility="8.0.001" expanded="true" height="103" name="Append" width="90" x="313" y="34">
        <parameter key="datamanagement" value="double_array"/>
        <parameter key="data_management" value="auto"/>
        <parameter key="merge_type" value="all"/>
      </operator>
      <operator activated="true" class="concurrency:cross_validation" compatibility="8.0.001" expanded="true" height="145" name="Cross Validation" width="90" x="447" y="34">
        <parameter key="split_on_batch_attribute" value="false"/>
        <parameter key="leave_one_out" value="false"/>
        <parameter key="number_of_folds" value="10"/>
        <parameter key="sampling_type" value="stratified sampling"/>
        <parameter key="use_local_random_seed" value="true"/>
        <parameter key="local_random_seed" value="1"/>
        <parameter key="enable_parallel_execution" value="true"/>
        <process expanded="true">
          <operator activated="true" class="concurrency:parallel_random_forest" compatibility="8.0.001" expanded="true" height="103" name="Random Forest (3)" width="90" x="246" y="34">
            <parameter key="number_of_trees" value="300"/>
            <parameter key="criterion" value="gain_ratio"/>
            <parameter key="maximal_depth" value="-1"/>
            <parameter key="apply_pruning" value="true"/>
            <parameter key="confidence" value="0.2"/>
            <parameter key="apply_prepruning" value="true"/>
            <parameter key="minimal_gain" value="0.02"/>
            <parameter key="minimal_leaf_size" value="5"/>
            <parameter key="minimal_size_for_split" value="5"/>
            <parameter key="number_of_prepruning_alternatives" value="80"/>
            <parameter key="random_splits" value="false"/>
            <parameter key="guess_subset_ratio" value="false"/>
            <parameter key="subset_ratio" value="0.2"/>
            <parameter key="voting_strategy" value="confidence vote"/>
            <parameter key="use_local_random_seed" value="true"/>
            <parameter key="local_random_seed" value="1"/>
            <parameter key="enable_parallel_execution" value="true"/>
          </operator>
          <connect from_port="training set" to_op="Random Forest (3)" to_port="training set"/>
          <connect from_op="Random Forest (3)" from_port="model" to_port="model"/>
          <portSpacing port="source_training set" spacing="0"/>
          <portSpacing port="sink_model" spacing="0"/>
          <portSpacing port="sink_through 1" spacing="0"/>
        </process>
        <process expanded="true">
          <operator activated="true" class="apply_model" compatibility="8.0.001" expanded="true" height="82" name="Apply Model" width="90" x="179" y="34">
            <list key="application_parameters"/>
            <parameter key="create_view" value="false"/>
          </operator>
          <operator activated="true" class="performance_binominal_classification" compatibility="8.0.001" expanded="true" height="82" name="Performance" width="90" x="380" y="34">
            <parameter key="main_criterion" value="AUC"/>
            <parameter key="accuracy" value="true"/>
            <parameter key="classification_error" value="true"/>
            <parameter key="kappa" value="true"/>
            <parameter key="AUC (optimistic)" value="true"/>
            <parameter key="AUC" value="true"/>
            <parameter key="AUC (pessimistic)" value="true"/>
            <parameter key="precision" value="false"/>
            <parameter key="recall" value="false"/>
            <parameter key="lift" value="false"/>
            <parameter key="fallout" value="false"/>
            <parameter key="f_measure" value="false"/>
            <parameter key="false_positive" value="false"/>
            <parameter key="false_negative" value="false"/>
            <parameter key="true_positive" value="false"/>
            <parameter key="true_negative" value="false"/>
            <parameter key="sensitivity" value="false"/>
            <parameter key="specificity" value="false"/>
            <parameter key="youden" value="false"/>
            <parameter key="positive_predictive_value" value="false"/>
            <parameter key="negative_predictive_value" value="false"/>
            <parameter key="psep" value="false"/>
            <parameter key="skip_undefined_labels" value="true"/>
            <parameter key="use_example_weights" value="true"/>
          </operator>
          <connect from_port="model" to_op="Apply Model" to_port="model"/>
          <connect from_port="test set" to_op="Apply Model" to_port="unlabelled data"/>
          <connect from_op="Apply Model" from_port="labelled data" to_op="Performance" to_port="labelled data"/>
          <connect from_op="Performance" from_port="performance" to_port="performance 1"/>
          <portSpacing port="source_model" spacing="0"/>
          <portSpacing port="source_test set" spacing="0"/>
          <portSpacing port="source_through 1" spacing="0"/>
          <portSpacing port="sink_test set results" spacing="0"/>
          <portSpacing port="sink_performance 1" spacing="0"/>
          <portSpacing port="sink_performance 2" spacing="0"/>
        </process>
      </operator>
      <operator activated="true" class="store" compatibility="8.0.001" expanded="true" height="68" name="Store Model" width="90" x="648" y="136">
        <parameter key="repository_entry" value="../models/model"/>
      </operator>
      <operator activated="true" class="apply_model" compatibility="8.0.001" expanded="true" height="82" name="Apply Model (3)" width="90" x="782" y="136">
        <list key="application_parameters"/>
        <parameter key="create_view" value="false"/>
      </operator>
      <operator activated="true" class="subprocess" compatibility="8.0.001" expanded="true" height="103" name="Write CSV" width="90" x="916" y="136">
        <process expanded="true">
          <operator activated="true" class="select_attributes" compatibility="8.0.001" expanded="true" height="82" name="Select Attributes" width="90" x="246" y="34">
            <parameter key="attribute_filter_type" value="subset"/>
            <parameter key="attribute" value=""/>
            <parameter key="attributes" value="loan_id|prediction(status)"/>
            <parameter key="use_except_expression" value="false"/>
            <parameter key="value_type" value="attribute_value"/>
            <parameter key="use_value_type_exception" value="false"/>
            <parameter key="except_value_type" value="time"/>
            <parameter key="block_type" value="attribute_block"/>
            <parameter key="use_block_type_exception" value="false"/>
            <parameter key="except_block_type" value="value_matrix_row_start"/>
            <parameter key="invert_selection" value="false"/>
            <parameter key="include_special_attributes" value="true"/>
          </operator>
          <operator activated="true" class="rename" compatibility="8.0.001" expanded="true" height="82" name="Rename" width="90" x="447" y="136">
            <parameter key="old_name" value="loan_id"/>
            <parameter key="new_name" value="Id"/>
            <list key="rename_additional_attributes">
              <parameter key="prediction(status)" value="Predicted"/>
            </list>
          </operator>
          <operator activated="true" class="write_csv" compatibility="8.0.001" expanded="true" height="82" name="Write CSV (2)" width="90" x="581" y="136">
            <parameter key="csv_file" value="submition.csv"/>
            <parameter key="column_separator" value=","/>
            <parameter key="write_attribute_names" value="true"/>
            <parameter key="quote_nominal_values" value="true"/>
            <parameter key="format_date_attributes" value="true"/>
            <parameter key="append_to_file" value="false"/>
            <parameter key="encoding" value="SYSTEM"/>
          </operator>
          <connect from_port="in 1" to_op="Select Attributes" to_port="example set input"/>
          <connect from_op="Select Attributes" from_port="example set output" to_op="Rename" to_port="example set input"/>
          <connect from_op="Select Attributes" from_port="original" to_port="out 2"/>
          <connect from_op="Rename" from_port="example set output" to_op="Write CSV (2)" to_port="input"/>
          <connect from_op="Write CSV (2)" from_port="through" to_port="out 1"/>
          <portSpacing port="source_in 1" spacing="0"/>
          <portSpacing port="source_in 2" spacing="0"/>
          <portSpacing port="sink_out 1" spacing="0"/>
          <portSpacing port="sink_out 2" spacing="0"/>
          <portSpacing port="sink_out 3" spacing="0"/>
        </process>
      </operator>
      <operator activated="false" class="retrieve" compatibility="8.0.001" expanded="true" height="68" name="Retrieve train_data" width="90" x="45" y="136">
        <parameter key="repository_entry" value="../predictive/data/train_data"/>
      </operator>
      <operator activated="false" class="retrieve" compatibility="8.0.001" expanded="true" height="68" name="Retrieve test_data" width="90" x="648" y="340">
        <parameter key="repository_entry" value="../predictive/data/test_data"/>
      </operator>
      <connect from_op="DB Read Train" from_port="out 1" to_op="Filter Examples" to_port="example set input"/>
      <connect from_op="DB Read Test" from_port="out 1" to_op="Apply Model (3)" to_port="unlabelled data"/>
      <connect from_op="Filter Examples" from_port="example set output" to_op="Append" to_port="example set 1"/>
      <connect from_op="Filter Examples" from_port="original" to_op="Append" to_port="example set 2"/>
      <connect from_op="Append" from_port="merged set" to_op="Cross Validation" to_port="example set"/>
      <connect from_op="Cross Validation" from_port="model" to_op="Store Model" to_port="input"/>
      <connect from_op="Cross Validation" from_port="example set" to_port="result 2"/>
      <connect from_op="Cross Validation" from_port="performance 1" to_port="result 3"/>
      <connect from_op="Store Model" from_port="through" to_op="Apply Model (3)" to_port="model"/>
      <connect from_op="Apply Model (3)" from_port="labelled data" to_op="Write CSV" to_port="in 1"/>
      <connect from_op="Write CSV" from_port="out 1" to_port="result 1"/>
      <portSpacing port="source_input 1" spacing="0"/>
      <portSpacing port="sink_result 1" spacing="0"/>
      <portSpacing port="sink_result 2" spacing="0"/>
      <portSpacing port="sink_result 3" spacing="0"/>
      <portSpacing port="sink_result 4" spacing="0"/>
      <description align="center" color="yellow" colored="false" height="50" resized="true" width="236" x="177" y="146">-1 labeled examples are duplicated</description>
    </process>
  </operator>
</process>
